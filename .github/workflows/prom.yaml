name: prom

on:
  push:
    branches: [ '*' ]
  pull_request:
    branches: [ 'master' ]
    types: [ 'opened', 'closed' ]

jobs:
  TestGeneral:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go: [ '1.13', '1.14', '1.15', '1.16', '1.17', '1.18', '1.19', '1.20', '1.21', 'oldstable', 'stable' ]
    name: General tests with Go ${{ matrix.go }}
    steps:
    - uses: actions/checkout@v3
    - name: Set up Go env
      uses: actions/setup-go@v4
      with:
        go-version: ${{ matrix.go }}
    - name: Run tests
      run: |
        go test -v -timeout 9999s -count 1 -p 1 -cover -coverprofile coverage_general.txt .
    - name: Codecov
      uses: codecov/codecov-action@v3
      with:
        flags: general
        name: general

  TestAwsDynamoDB:
    name: Test against AWS DynamoDB
    runs-on: ubuntu-latest
    if: |
      github.ref == 'refs/heads/master' || github.ref == 'refs/heads/dynamodb'
    steps:
    - name: Set up Go env
      uses: actions/setup-go@v4
      with:
        go-version: ^1.13
    - name: Check out code into the Go module directory
      uses: actions/checkout@v3
    - name: Start AWS DynamoDB local server
      run: docker run -d --name dynamodb -p 8000:8000 amazon/dynamodb-local -jar DynamoDBLocal.jar -inMemory -sharedDb
    - name: Test
      run: |
        export AWS_REGION="us-west-2"
        export AWS_ACCESS_KEY_ID="DUMMYIDEXAMPLE"
        export AWS_SECRET_ACCESS_KEY="DUMMYEXAMPLEKEY"
        export AWS_DYNAMODB_ENDPOINT="http://localhost:8000"
        go test -v -timeout 9999s -count 1 -p 1 -cover -coverprofile coverage_dynamodb.txt ./dynamodb
    - name: Codecov
      uses: codecov/codecov-action@v3
      with:
        flags: dynamodb
        name: dynamodb

  TestMongoStandalone:
    name: Test against MongoDB (Standalone)
    runs-on: ubuntu-latest
    if: |
      github.ref == 'refs/heads/master' || github.ref == 'refs/heads/mongo'
    steps:
    - name: Set up Go env
      uses: actions/setup-go@v4
      with:
        go-version: ^1.13
    - name: Check out code into the Go module directory
      uses: actions/checkout@v3
    - name: Start MongoDB Standalone server
      run: docker run -d --name mongodb -e MONGO_INITDB_ROOT_USERNAME=test -e MONGO_INITDB_ROOT_PASSWORD=test -e MONGO_INITDB_DATABASE=test -p 27017:27017 mongo:4.2
    - name: Test
      run: |
        export MONGO_DB="test"
        export MONGO_URL="mongodb://test:test@localhost:27017/?authSource=admin"
        go test -v -timeout 9999s -count 1 -p 1 -cover -coverprofile coverage_mongo_singleserver.txt ./mongo
    - name: Codecov
      uses: codecov/codecov-action@v3
      with:
        flags: mongo_singleserver
        name: mongo_singleserver

  TestMongoReplicaSet:
    name: Test against MongoDB (ReplicaSet)
    runs-on: ubuntu-latest
    if: |
      github.ref == 'refs/heads/master' || github.ref == 'refs/heads/mongo'
    steps:
    - name: Set up Go env
      uses: actions/setup-go@v4
      with:
        go-version: ^1.13
    - name: Check out code into the Go module directory
      uses: actions/checkout@v3
    - name: Start MongoDB ReplicaSet server
      run: docker run -d --name mongodb-replset -e MONGODB_REPLICA_SET_MODE=primary -e MONGODB_REPLICA_SET_KEY=myreplset -e MONGODB_ADVERTISED_HOSTNAME=localhost -e MONGODB_PRIMARY_PORT_NUMBER=27017 -e MONGODB_ROOT_PASSWORD=test -e MONGODB_DATABASE=test -p 27017:27017 bitnami/mongodb:4.2
    - name: Test
      run: |
        export MONGO_DB="test"
        export MONGO_URL="mongodb://root:test@localhost:27017/?authSource=admin&replicaSet=replicaset"
        go test -v -timeout 9999s -count 1 -p 1 -cover -coverprofile coverage_mongo_replicaset.txt ./mongo
    - name: Codecov
      uses: codecov/codecov-action@v3
      with:
        flags: mongo_replicaset
        name: mongo_replicaset

  TestRedis:
    runs-on: ubuntu-latest
    if: |
      github.ref == 'refs/heads/master' || github.ref == 'refs/heads/redis'
    strategy:
      matrix:
        go: [ 'oldstable', 'stable' ]
        redis: [ '6.0.0', '6.2.0', '7.0.0' ]
    name: Redis tests with Go ${{ matrix.go }}, Redis ${{ matrix.redis }}
    steps:
      - uses: actions/checkout@v3
      - name: Set up Go env
        uses: actions/setup-go@v4
        with:
          go-version: ${{ matrix.go }}
      - name: Start Redis server ${{ matrix.redis }}
        run: docker run -d --name redis-all-in-one -e STANDALONE=true -e SENTINEL=true -e IP=0.0.0.0 -p 5000-5002:5000-5002 -p 7000-7007:7000-7007 -p 6379:7006 grokzen/redis-cluster:${{ matrix.redis }}
      - name: Run tests
        run: |
          export REDIS_HOST_AND_PORT="127.0.0.1:6379"
          export REDIS_HOSTS_AND_PORTS="127.0.0.1:6379"
          export REDIS_FAILOVER_HOSTS_AND_PORTS="127.0.0.1:5000"
          export REDIS_FAILOVER_MASTER_NAME="sentinel7000"
          export REDIS_CLUSTER_HOSTS_AND_PORTS="127.0.0.1:7000,127.0.0.1:7001,127.0.0.1:7002,127.0.0.1:7003,127.0.0.1:7004,127.0.0.1:7005"
          go test -v -timeout 9999s -count 1 -p 1 -cover -coverprofile coverage_redis.txt ./goredis
      - name: Codecov
        uses: codecov/codecov-action@v3
        with:
          flags: redis
          name: redis

  TestSqlite:
    name: Test against SQLite
    runs-on: ubuntu-latest
    if: |
      github.ref == 'refs/heads/master' || github.ref == 'refs/heads/sql'
    steps:
    - name: Set up Go env
      uses: actions/setup-go@v4
      with:
        go-version: ^1.13
    - name: Check out code into the Go module directory
      uses: actions/checkout@v3
    - name: Test
      run: |
        export TIMEZONE="Asia/Ho_Chi_Minh"
        mkdir -p ./sql/temp
        export SQLITE_DRIVER="sqlite3"
        export SQLITE_URL="./temp/temp.db"
        go test -v -timeout 9999s -count 1 -p 1 -cover -coverprofile coverage_sqlite.txt ./sql
    - name: Codecov
      uses: codecov/codecov-action@v3
      with:
        flags: sqlite
        name: sqlite

  TestMySQL:
    name: Test against MySQL
    runs-on: ubuntu-latest
    if: |
      github.ref == 'refs/heads/master' || github.ref == 'refs/heads/sql'
    steps:
    - name: Set up Go env
      uses: actions/setup-go@v4
      with:
        go-version: ^1.13
    - name: Check out code into the Go module directory
      uses: actions/checkout@v3
    - name: Start MySQL server
      run: docker run -d --name mysql -e MYSQL_ROOT_PASSWORD=test -e MYSQL_DATABASE=test -e MYSQL_USER=test -e MYSQL_PASSWORD=test -p 3306:3306 mysql:8
    - name: Test with parseTime
      run: |
        export TIMEZONE="Asia/Ho_Chi_Minh"
        export MYSQL_DRIVER="mysql"
        export MYSQL_URL="test:test@tcp(localhost:3306)/test?charset=utf8mb4,utf8&parseTime=true&loc=\${loc}"
        go test -v -timeout 9999s -count 1 -p 1 -cover -coverprofile coverage_mysql_parsetime.txt ./sql
    - name: Codecov
      uses: codecov/codecov-action@v3
      with:
        flags: mysql_parsetime
        name: mysql_parsetime
    - name: Test without parseTime
      run: |
        export TIMEZONE="Asia/Ho_Chi_Minh"
        export MYSQL_DRIVER="mysql"
        export MYSQL_URL="test:test@tcp(localhost:3306)/test?charset=utf8mb4,utf8&parseTime=false&loc=\${loc}"
        go test -v -timeout 9999s -count 1 -p 1 -cover -coverprofile coverage_mysql.txt ./sql
    - name: Codecov
      uses: codecov/codecov-action@v3
      with:
        flags: mysql
        name: mysql

  TestPostgreSQL:
    name: Test against PostgreSQL
    runs-on: ubuntu-latest
    if: |
      github.ref == 'refs/heads/master' || github.ref == 'refs/heads/sql'
    steps:
    - name: Set up Go env
      uses: actions/setup-go@v4
      with:
        go-version: ^1.13
    - name: Check out code into the Go module directory
      uses: actions/checkout@v3
    - name: Start PostgreSQL server
      run: docker run -d --name postgres -e POSTGRES_DB=test -e POSTGRES_USER=test -e POSTGRES_PASSWORD=test -p 5432:5432 postgres:11
    - name: Test
      run: |
        export TIMEZONE="Asia/Ho_Chi_Minh"
        export PGSQL_DRIVER="pgx"
        export PGSQL_URL="postgres://test:test@localhost:5432/test?sslmode=disable&client_encoding=UTF-8&application_name=prom"
        go test -v -timeout 9999s -count 1 -p 1 -cover -coverprofile coverage_pgsql.txt ./sql
    - name: Codecov
      uses: codecov/codecov-action@v3
      with:
        flags: pgsql
        name: pgsql

  TestMSSQL:
    name: Test against MSSQL
    runs-on: ubuntu-latest
    if: |
      github.ref == 'refs/heads/master' || github.ref == 'refs/heads/sql'
    steps:
    - name: Set up Go env
      uses: actions/setup-go@v4
      with:
        go-version: ^1.13
    - name: Check out code into the Go module directory
      uses: actions/checkout@v3
    - name: Start MSSQL server
      run: docker run -d --name mssql-express -e ACCEPT_EULA=Y -e SA_PASSWORD=SecretPassword1 -e MSSQL_PID=Express -p 1433:1433 mcr.microsoft.com/mssql/server:2019-latest
    - name: Test
      run: |
        export TIMEZONE="Asia/Ho_Chi_Minh"
        export MSSQL_DRIVER="sqlserver"
        export MSSQL_URL="sqlserver://sa:SecretPassword1@localhost:1433?database=tempdb"
        go test -v -timeout 9999s -count 1 -p 1 -cover -coverprofile coverage_mssql.txt ./sql
    - name: Codecov
      uses: codecov/codecov-action@v3
      with:
        flags: mssql
        name: mssql

  TestCosmosDb:
    name: Test against Azure Cosmos DB
    runs-on: windows-latest
    if: |
      github.ref == 'refs/heads/master' || github.ref == 'refs/heads/gocosmos'
    steps:
    - name: Set up Go env
      uses: actions/setup-go@v4
      with:
        go-version: ^1.13
    - name: Check out code into the Go module directory
      uses: actions/checkout@v3
    - name: Test
      run: |
        choco install azure-cosmosdb-emulator
        & "C:\Program Files\Azure Cosmos DB Emulator\Microsoft.Azure.Cosmos.Emulator.exe"
        Start-Sleep -s 120
        try { Invoke-RestMethod -Method GET https://127.0.0.1:8081/ } catch {}
        netstat -nt
        $env:COSMOSDB_DRIVER='gocosmos'
        $env:COSMOSDB_URL='AccountEndpoint=https://127.0.0.1:8081/;AccountKey=C2y6yDjf5/R+ob0N8A7Cgv30VRDJIWEHLM+4QDU5DE2nQ9nDuVTqobD4b8mGGyPMbIZnqyMsEcaGQy67XIw/Jw==;Db=prom'
        $env:TIMEZONE='Asia/Ho_Chi_Minh'
        go test -v -timeout 9999s -count 1 -p 1 -cover -coverprofile="coverage_cosmosdb.txt" ./sql
    - name: Codecov
      uses: codecov/codecov-action@v3
      with:
        flags: cosmosdb
        name: cosmosdb
