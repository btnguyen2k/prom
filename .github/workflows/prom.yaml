name: prom

on:
  push:
    branches: [ '*' ]
  pull_request:
    branches: [ master ]

jobs:
  testGeneral:
    name: General test
    runs-on: ubuntu-latest
    steps:
    - name: Set up Go env
      uses: actions/setup-go@v2
      with:
        go-version: ^1.13
    - name: Check out code into the Go module directory
      uses: actions/checkout@v2
    - name: Test
      run: |
        go test -cover -coverprofile coverage_general.txt -v .
        bash <(curl -s https://codecov.io/bash) -cF general

  testAwsDynamoDB:
    name: Test against AWS DynamoDB
    runs-on: ubuntu-latest
    steps:
    - name: Set up Go env
      uses: actions/setup-go@v2
      with:
        go-version: ^1.13
    - name: Check out code into the Go module directory
      uses: actions/checkout@v2
    - name: Start AWS DynamoDB local server
      run: docker run -d --name dynamodb -p 8000:8000 amazon/dynamodb-local -jar DynamoDBLocal.jar -inMemory -sharedDb
    - name: Test
      run: |
        export AWS_REGION="us-west-2"
        export AWS_ACCESS_KEY_ID="DUMMYIDEXAMPLE"
        export AWS_SECRET_ACCESS_KEY="DUMMYEXAMPLEKEY"
        export AWS_DYNAMODB_ENDPOINT="http://localhost:8000"
        go test -timeout 9999s -p 1 -cover -coverprofile coverage_dynamodb.txt -v -run ".*Dynamodb.*" .
        bash <(curl -s https://codecov.io/bash) -cF dynamodb

  testMongoStandalone:
    name: Test against MongoDB (Standalone)
    runs-on: ubuntu-latest
    steps:
    - name: Set up Go env
      uses: actions/setup-go@v2
      with:
        go-version: ^1.13
    - name: Check out code into the Go module directory
      uses: actions/checkout@v2
    - name: Start MongoDB Standalone server
      run: docker run -d --name mongodb -e MONGO_INITDB_ROOT_USERNAME=test -e MONGO_INITDB_ROOT_PASSWORD=test -e MONGO_INITDB_DATABASE=test -p 27017:27017 mongo:4.2
    - name: Test
      run: |
        export MONGO_DB="test"
        export MONGO_URL="mongodb://test:test@localhost:27017/?authSource=admin"
        go test -p 1 -cover -coverprofile coverage_mongo_singleserver.txt -v -run ".*Mongo.*" .
        bash <(curl -s https://codecov.io/bash) -cF mongo_singleserver

  testMongoReplicaSet:
    name: Test against MongoDB (ReplicaSet)
    runs-on: ubuntu-latest
    steps:
    - name: Set up Go env
      uses: actions/setup-go@v2
      with:
        go-version: ^1.13
    - name: Check out code into the Go module directory
      uses: actions/checkout@v2
    - name: Start MongoDB ReplicaSet server
      run: docker run -d --name mongodb-replset -e MONGODB_REPLICA_SET_MODE=primary -e MONGODB_REPLICA_SET_KEY=myreplset -e MONGODB_ADVERTISED_HOSTNAME=localhost -e MONGODB_PRIMARY_PORT_NUMBER=27017 -e MONGODB_ROOT_PASSWORD=test -e MONGODB_DATABASE=test -p 27017:27017 bitnami/mongodb:4.2
    - name: Test
      run: |
        export MONGO_DB="test"
        export MONGO_URL="mongodb://root:test@localhost:27017/?authSource=admin&replicaSet=replicaset"
        go test -p 1 -cover -coverprofile coverage_mongo_replicaset.txt -v -run ".*Mongo.*" .
        bash <(curl -s https://codecov.io/bash) -cF mongo_replicaset

  testRedis:
    name: Test against Redis
    runs-on: ubuntu-latest
    steps:
      - name: Set up Go env
        uses: actions/setup-go@v2
        with:
          go-version: ^1.13
      - name: Check out code into the Go module directory
        uses: actions/checkout@v2
      - name: Start Redis server
        run: docker run -d --name redis-all-in-one -e STANDALONE=true -e SENTINEL=true -e IP=0.0.0.0 -p 5000-5002:5000-5002 -p 7000-7007:7000-7007 -p 6379:7006 grokzen/redis-cluster:6.2.0
      - name: Test
        run: |
          export REDIS_HOSTS_AND_PORTS="127.0.0.1:6379"
          export REDIS_FAILOVER_HOSTS_AND_PORTS="127.0.0.1:5000"
          export REDIS_FAILOVER_MASTER_NAME="sentinel7000"
          export REDIS_CLUSTER_HOSTS_AND_PORTS="127.0.0.1:7000,127.0.0.1:7001,127.0.0.1:7002,127.0.0.1:7003,127.0.0.1:7004,127.0.0.1:7005"
          go test -p 1 -cover -coverprofile coverage_redis.txt -v -run ".*Redis.*" .
          bash <(curl -s https://codecov.io/bash) -cF redis

  testSqlite:
    name: Test against SQLite
    runs-on: ubuntu-latest
    steps:
    - name: Set up Go env
      uses: actions/setup-go@v2
      with:
        go-version: ^1.13
    - name: Check out code into the Go module directory
      uses: actions/checkout@v2
    - name: Test
      run: |
        export TIMEZONE="Asia/Ho_Chi_Minh"
        mkdir ./temp
        export SQLITE_DRIVER="sqlite3"
        export SQLITE_URL="./temp/temp.db"
        go test -p 1 -cover -coverprofile coverage_sqlite.txt -v -run ".*Sql.*" .
        bash <(curl -s https://codecov.io/bash) -cF sqlite

  testMySQL:
    name: Test against MySQL
    runs-on: ubuntu-latest
    steps:
    - name: Set up Go env
      uses: actions/setup-go@v2
      with:
        go-version: ^1.13
    - name: Check out code into the Go module directory
      uses: actions/checkout@v2
    - name: Start MySQL server
      run: docker run -d --name mysql -e MYSQL_ROOT_PASSWORD=test -e MYSQL_DATABASE=test -e MYSQL_USER=test -e MYSQL_PASSWORD=test -p 3306:3306 mysql:8
    - name: Test against parseTime
      run: |
        export TIMEZONE="Asia/Ho_Chi_Minh"
        export MYSQL_DRIVER="mysql"
        export MYSQL_URL="test:test@tcp(localhost:3306)/test?charset=utf8mb4,utf8&parseTime=true&loc=\${loc}"
        go test -p 1 -cover -coverprofile coverage_mysql_parsetime.txt -v -run ".*Sql.*" .
        bash <(curl -s https://codecov.io/bash) -cF mysql_parsetime
    - name: Test againstout parseTime
      run: |
        export TIMEZONE="Asia/Ho_Chi_Minh"
        export MYSQL_DRIVER="mysql"
        export MYSQL_URL="test:test@tcp(localhost:3306)/test?charset=utf8mb4,utf8&parseTime=false&loc=\${loc}"
        go test -p 1 -cover -coverprofile coverage_mysql.txt -v -run ".*Sql.*" .
        bash <(curl -s https://codecov.io/bash) -cF mysql

  testPostgreSQL:
    name: Test against PostgreSQL
    runs-on: ubuntu-latest
    steps:
    - name: Set up Go env
      uses: actions/setup-go@v2
      with:
        go-version: ^1.13
    - name: Check out code into the Go module directory
      uses: actions/checkout@v2
    - name: Start PostgreSQL server
      run: docker run -d --name postgres -e POSTGRES_DB=test -e POSTGRES_USER=test -e POSTGRES_PASSWORD=test -p 5432:5432 postgres:11
    - name: Test
      run: |
        export TIMEZONE="Asia/Ho_Chi_Minh"
        export PGSQL_DRIVER="pgx"
        export PGSQL_URL="postgres://test:test@localhost:5432/test?sslmode=disable&client_encoding=UTF-8&application_name=prom"
        go test -p 1 -cover -coverprofile coverage_pgsql.txt -v -run ".*Sql.*" .
        bash <(curl -s https://codecov.io/bash) -cF pgsql

  testMSSQL:
    name: Test against MSSQL
    runs-on: ubuntu-latest
    steps:
    - name: Set up Go env
      uses: actions/setup-go@v2
      with:
        go-version: ^1.13
    - name: Check out code into the Go module directory
      uses: actions/checkout@v2
    - name: Start MSSQL server
      run: docker run -d --name mssql-express -e ACCEPT_EULA=Y -e SA_PASSWORD=SecretPassword1 -e MSSQL_PID=Express -p 1433:1433 mcr.microsoft.com/mssql/server:2019-latest
    - name: Test
      run: |
        export TIMEZONE="Asia/Ho_Chi_Minh"
        export MSSQL_DRIVER="sqlserver"
        export MSSQL_URL="sqlserver://sa:SecretPassword1@localhost:1433?database=tempdb"
        go test -p 1 -cover -coverprofile coverage_mssql.txt -v -run ".*Sql.*" .
        bash <(curl -s https://codecov.io/bash) -cF mssql

  testCosmosDb:
    name: Test against Azure Cosmos DB
    runs-on: windows-latest
    steps:
    - name: Set up Go env
      uses: actions/setup-go@v2
      with:
        go-version: ^1.13
    - name: Check out code into the Go module directory
      uses: actions/checkout@v2
    - name: Test
      run: |
        choco install azure-cosmosdb-emulator
        & "C:\Program Files\Azure Cosmos DB Emulator\Microsoft.Azure.Cosmos.Emulator.exe"
        Start-Sleep -s 120
        try { Invoke-RestMethod -Method GET https://127.0.0.1:8081/ } catch {}
        netstat -nt
        $env:COSMOSDB_DRIVER='gocosmos'
        $env:COSMOSDB_URL='AccountEndpoint=https://127.0.0.1:8081/;AccountKey=C2y6yDjf5/R+ob0N8A7Cgv30VRDJIWEHLM+4QDU5DE2nQ9nDuVTqobD4b8mGGyPMbIZnqyMsEcaGQy67XIw/Jw==;Db=prom'
        $env:TIMEZONE='Asia/Ho_Chi_Minh'
        go test -timeout 9999s -p 1 -cover -coverprofile="coverage_cosmosdb.txt" -v -run ".*Sql.*" .
    - name: Codecov
      uses: codecov/codecov-action@v1.0.15
      with:
        flags: cosmosdb
        name: cosmosdb
