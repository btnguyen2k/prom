name: 'ci'

on:
  push:
    branches: [ '*' ]
  pull_request:
    types: [ opened, edited, reopened, synchronize, review_requested ]
    branches: [ '*' ]
  workflow_call:

env:
  COVER_PKG: github.com/btnguyen2k/prom,github.com/btnguyen2k/prom/sql

jobs:
  TestCommon:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go: [ '1.18', 'oldstable', 'stable' ]
    name: Run common tests with Go ${{ matrix.go }}
    steps:
      - name: Check out code
        uses: actions/checkout@v4
      - name: Set up Go env
        uses: actions/setup-go@v4
        with:
          go-version: ${{ matrix.go }}
      - name: Run tests
        run: |
          go version
          go test -v -timeout 9999s -count 1 -p 1 -cover -coverprofile coverage.txt ./
      - name: Codecov
        uses: codecov/codecov-action@v3
        with:
          flags: common
          name: common

  TestSQLite:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go: [ '1.18', 'oldstable', 'stable' ]
    name: Run SQLite tests with Go ${{ matrix.go }}
    steps:
      - name: Check out code
        uses: actions/checkout@v4
      - name: Set up Go env
        uses: actions/setup-go@v4
        with:
          go-version: ${{ matrix.go }}
      - name: Run tests (driver github.com/mattn/go-sqlite3)
        run: |
          export TIMEZONE="Asia/Ho_Chi_Minh"
          export SQLITE_URL="./temp/temp.db"
          export SQLITE_DRIVER="sqlite3"
          go version
          cd ./sql_test \
            && mkdir -p ./temp \
            && cp -f driver_test_sqlite1.test driver_test.go && go mod tidy \
            && go test -v -timeout 9999s -count 1 -p 1 -cover -coverpkg=${COVER_PKG} -coverprofile=../coverage_sqlite_1.txt ./ \
            && cd ..
      - name: Run tests (driver modernc.org/sqlite)
        run: |
          export TIMEZONE="Asia/Ho_Chi_Minh"
          export SQLITE_URL="./temp/temp.db"
          export SQLITE_DRIVER="sqlite"
          go version
          cd ./sql_test \
            && mkdir -p ./temp \
            && cp -f driver_test_sqlite2.test driver_test.go && go mod tidy \
            && go test -v -timeout 9999s -count 1 -p 1 -cover -coverpkg=${COVER_PKG} -coverprofile=../coverage_sqlite_2.txt ./ \
            && cd ..
      - name: Codecov
        uses: codecov/codecov-action@v3
        with:
          flags: sqlite
          name: sqlite

  TestPostgreSQL:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go: [ '1.19', 'oldstable', 'stable' ]
        pgsql: [ '11', '12', '13', '14', '15', '16' ]
    name: Run PostgreSQL ${{ matrix.pgsql }} tests with Go ${{ matrix.go }}
    steps:
      - name: Check out code
        uses: actions/checkout@v4
      - name: Set up Go env
        uses: actions/setup-go@v4
        with:
          go-version: ${{ matrix.go }}
      - name: Start PostgreSQL server
        run: docker run -d --name postgres -e POSTGRES_DB=test -e POSTGRES_USER=test -e POSTGRES_PASSWORD=test -p 5432:5432 postgres:${{ matrix.pgsql }}
      - name: Run tests (driver github.com/jackc/pgx/v5)
        run: |
          export TIMEZONE="Asia/Ho_Chi_Minh"
          export PGSQL_DRIVER="pgx"
          export PGSQL_URL="postgres://test:test@localhost:5432/test?sslmode=disable&client_encoding=UTF-8&application_name=prom"
          go version
          cd ./sql_test \
            && cp -f driver_test_pgsql1.test driver_test.go && go mod tidy \
            && go test -v -timeout 9999s -count 1 -p 1 -cover -cover -coverpkg=${COVER_PKG} -coverprofile ../coverage_pgsql_1.txt ./ \
            && cd ..
      - name: Codecov
        uses: codecov/codecov-action@v3
        with:
          flags: pgsql
          name: pgsql

#  TestMSSQL:
#    runs-on: ubuntu-latest
#    strategy:
#      matrix:
#        go: [ '1.18', 'oldstable', 'stable' ]
#        mssql: [ '2017-latest', '2019-latest', '2022-latest' ]
#    name: Run MSSQL ${{ matrix.mssql }} tests with Go ${{ matrix.go }}
#    steps:
#      - name: Check out code
#        uses: actions/checkout@v4
#      - name: Set up Go env
#        uses: actions/setup-go@v4
#        with:
#          go-version: ${{ matrix.go }}
#      - name: Start MSSQL server
#        run: docker run -d --name mssql-express -e ACCEPT_EULA=Y -e SA_PASSWORD=SecretPassword1 -e MSSQL_PID=Express -p 1433:1433 mcr.microsoft.com/mssql/server:${{ matrix.mssql }}
#      - name: Run tests
#        run: |
#          export TIMEZONE="Asia/Ho_Chi_Minh"
#          export MSSQL_DRIVER="sqlserver"
#          export MSSQL_URL="sqlserver://sa:SecretPassword1@localhost:1433?database=tempdb"
#          go version
#          cd ./sql_test && go test -v -timeout 9999s -count 1 -p 1 -cover -coverprofile ../coverage_mssql.txt ./ && cd ..
#      - name: Codecov
#        uses: codecov/codecov-action@v3
#        with:
#          flags: mssql
#          name: mssql
#
#  TestMySql:
#    runs-on: ubuntu-latest
#    strategy:
#      matrix:
#        go: [ '1.18', 'oldstable', 'stable' ]
#        mysql: [ '5.7', '8.0', '8.2' ]
#    name: Run MySQL ${{ matrix.mysql }} tests with Go ${{ matrix.go }}
#    steps:
#      - name: Check out code
#        uses: actions/checkout@v4
#      - name: Set up Go env
#        uses: actions/setup-go@v4
#        with:
#          go-version: ${{ matrix.go }}
#      - name: Start MySQL server
#        run: docker run -d --name mysql -e MYSQL_ROOT_PASSWORD=test -e MYSQL_DATABASE=test -e MYSQL_USER=test -e MYSQL_PASSWORD=test -p 3306:3306 mysql:${{ matrix.mysql }} --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci
#      - name: Run tests with parseTime
#        run: |
#          export TIMEZONE="Asia/Ho_Chi_Minh"
#          export MYSQL_DRIVER="mysql"
#          export MYSQL_URL="test:test@tcp(localhost:3306)/test?charset=utf8mb4,utf8&parseTime=true&loc=\${loc}"
#          go version
#          cd ./sql_test && go test -v -timeout 9999s -count 1 -p 1 -cover -coverprofile ../coverage_mysql_parsetime.txt ./ && cd ..
#      - name: Codecov
#        uses: codecov/codecov-action@v3
#        with:
#          flags: mysql_parsetime
#          name: mysql_parsetime
#      - name: Run tests without parseTime
#        run: |
#          export TIMEZONE="Asia/Ho_Chi_Minh"
#          export MYSQL_DRIVER="mysql"
#          export MYSQL_URL="test:test@tcp(localhost:3306)/test?charset=utf8mb4,utf8&parseTime=false&loc=\${loc}"
#          go version
#          cd ./sql_test && go test -v -timeout 9999s -count 1 -p 1 -cover -coverprofile ../coverage_mysql.txt ./ && cd ..
#      - name: Codecov
#        uses: codecov/codecov-action@v3
#        with:
#          flags: mysql
#          name: mysql
#
#  TestCoverage:
#    runs-on: ubuntu-latest
#    strategy:
#      matrix:
#        go: [ '1.18', 'oldstable', 'stable' ]
#    name: Run coverage tests with Go ${{ matrix.go }}
#    steps:
#      - name: Check out code
#        uses: actions/checkout@v4
#      - name: Set up Go env
#        uses: actions/setup-go@v4
#        with:
#          go-version: ${{ matrix.go }}
#      - name: Start PostgreSQL server
#        run: docker run -d --name postgres -e POSTGRES_DB=test -e POSTGRES_USER=test -e POSTGRES_PASSWORD=test -p 5432:5432 postgres:16
#      - name: Start MSSQL server
#        run: docker run -d --name mssql-express -e ACCEPT_EULA=Y -e SA_PASSWORD=SecretPassword1 -e MSSQL_PID=Express -p 1433:1433 mcr.microsoft.com/mssql/server:2022-latest
#      - name: Start MySQL server
#        run: docker run -d --name mysql -e MYSQL_ROOT_PASSWORD=test -e MYSQL_DATABASE=test -e MYSQL_USER=test -e MYSQL_PASSWORD=test -p 3306:3306 mysql:8.2 --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci
#      - name: Run tests
#        run: |
#          export TIMEZONE="Asia/Ho_Chi_Minh"
#          mkdir -p ./sql/temp
#          export SQLITE_DRIVER="sqlite3"
#          export SQLITE_URL="./temp/temp.db"
#          export PGSQL_DRIVER="pgx"
#          export PGSQL_URL="postgres://test:test@localhost:5432/test?sslmode=disable&client_encoding=UTF-8&application_name=prom"
#          export MSSQL_DRIVER="sqlserver"
#          export MSSQL_URL="sqlserver://sa:SecretPassword1@localhost:1433?database=tempdb"
#          export MYSQL_DRIVER="mysql"
#          export MYSQL_URL="test:test@tcp(localhost:3306)/test?charset=utf8mb4,utf8&parseTime=true&loc=\${loc}"
#          go version
#          cd ./sql_test && go test -v -timeout 9999s -count 1 -p 1 -cover -coverprofile ../coverage_all.txt ./ && cd ..
#      - name: Codecov
#        uses: codecov/codecov-action@v3
#        with:
#          flags: coverage
#          name: coverage
