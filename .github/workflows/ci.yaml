name: 'ci'

on:
  push:
    branches: [ '*' ]
  pull_request:
    types: [ opened, edited, reopened, synchronize, review_requested ]
    branches: [ '*' ]
  workflow_call:

jobs:
  TestCommon:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go: [ '1.18', 'oldstable', 'stable' ]
    name: Run common tests with Go ${{ matrix.go }}
    steps:
      - name: Check out code
        uses: actions/checkout@v4
      - name: Set up Go env
        uses: actions/setup-go@v4
        with:
          go-version: ${{ matrix.go }}
      - name: Run tests
        run: |
          go version
          go test -v -timeout 9999s -count 1 -p 1 -cover -coverprofile coverage.txt .
      - name: Codecov
        uses: codecov/codecov-action@v3
        with:
          flags: common
          name: common

  TestSQLite:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go: [ '1.18', 'oldstable', 'stable' ]
    name: Run SQLite tests with Go ${{ matrix.go }}
    steps:
      - name: Check out code
        uses: actions/checkout@v4
      - name: Set up Go env
        uses: actions/setup-go@v4
        with:
          go-version: ${{ matrix.go }}
      - name: Run tests
        run: |
          export TIMEZONE="Asia/Ho_Chi_Minh"
          mkdir -p ./sql/temp
          export SQLITE_DRIVER="sqlite3"
          export SQLITE_URL="./temp/temp.db"
          go version
          go test -v -timeout 9999s -count 1 -p 1 -cover -coverprofile coverage_sqlite.txt ./sql/
      - name: Codecov
        uses: codecov/codecov-action@v3
        with:
          flags: sqlite
          name: sqlite

  TestPostgreSQL:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go: [ '1.18', 'oldstable', 'stable' ]
        pgsql: [ '11', '12', '13', '14', '15', '16' ]
    name: Run PostgreSQL ${{ matrix.pgsql }} tests with Go ${{ matrix.go }}
    steps:
      - name: Check out code
        uses: actions/checkout@v4
      - name: Set up Go env
        uses: actions/setup-go@v4
        with:
          go-version: ${{ matrix.go }}
      - name: Start PostgreSQL server
        run: docker run -d --name postgres -e POSTGRES_DB=test -e POSTGRES_USER=test -e POSTGRES_PASSWORD=test -p 5432:5432 postgres:${{ matrix.pgsql }}
      - name: Run tests
        run: |
          export TIMEZONE="Asia/Ho_Chi_Minh"
          export PGSQL_DRIVER="pgx"
          export PGSQL_URL="postgres://test:test@localhost:5432/test?sslmode=disable&client_encoding=UTF-8&application_name=prom"
          go version
          go test -v -timeout 9999s -count 1 -p 1 -cover -coverprofile coverage_pgsql.txt ./sql/
      - name: Codecov
        uses: codecov/codecov-action@v3
        with:
          flags: pgsql
          name: pgsql

  TestMSSQL:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go: [ '1.18', 'oldstable', 'stable' ]
        mssql: [ '2017-latest', '2019-latest', '2022-latest' ]
    name: Run MSSQL ${{ matrix.mssql }} tests with Go ${{ matrix.go }}
    steps:
      - name: Check out code
        uses: actions/checkout@v4
      - name: Set up Go env
        uses: actions/setup-go@v4
        with:
          go-version: ${{ matrix.go }}
      - name: Start MSSQL server
        run: docker run -d --name mssql-express -e ACCEPT_EULA=Y -e SA_PASSWORD=SecretPassword1 -e MSSQL_PID=Express -p 1433:1433 mcr.microsoft.com/mssql/server:${{ matrix.mssql }}
      - name: Run tests
        run: |
          export TIMEZONE="Asia/Ho_Chi_Minh"
          export MSSQL_DRIVER="sqlserver"
          export MSSQL_URL="sqlserver://sa:SecretPassword1@localhost:1433?database=tempdb"
          go version
          go test -v -timeout 9999s -count 1 -p 1 -cover -coverprofile coverage_mssql.txt ./sql/
      - name: Codecov
        uses: codecov/codecov-action@v3
        with:
          flags: mssql
          name: mssql
