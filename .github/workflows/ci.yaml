name: 'ci'

on:
  push:
    branches: [ '*' ]
  pull_request:
    types: [ opened, edited, reopened, synchronize, review_requested ]
    branches: [ '*' ]
  workflow_call:

env:
  COVER_PKG: github.com/btnguyen2k/prom,github.com/btnguyen2k/prom/sql

jobs:
  GoFmt:
    runs-on: ubuntu-latest
    name: Check format with go fmt
    steps:
      - name: Check out code
        uses: actions/checkout@v4
      - name: Set up Go env
        uses: actions/setup-go@v5
        with:
          # pick one Go version to check format
          go-version: 'stable'
      - name: Run go fmt
        run: |
          go version
          go fmt ./...

  GoLint:
    name: GoLint
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4
      - name: Set up Go env
        uses: actions/setup-go@v5
        with:
          # pick one Go version for linting
          go-version: 'stable'
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v6
        with:
          version: latest
          only-new-issues: true

  ReleaseDryRun:
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    needs: [ GoFmt, GoLint ]
    outputs:
      RESULT: ${{ steps.release_dry_run.outputs.result }}
      VERSION: ${{ steps.release_dry_run.outputs.releaseVersion }}
      RELEASE_NOTES: ${{ steps.release_dry_run.outputs.releaseNotes }}
    steps:
      - name: Check out code
        uses: actions/checkout@v4
      - name: Install Node
        uses: actions/setup-node@v5
        with:
          node-version: 'lts/*'
      - name: Release (dry-run)
        id: release_dry_run
        uses: btnguyen2k/action-semrelease@v4
        with:
          dry-run: true
          auto-mode: true
          github-token: ${{ secrets.GITHUB_TOKEN }}
          tag-major-release: false
          tag-minor-release: false
          branches: ${{ github.ref_name }}
          tag-prefix: ${{ env.TAG_PREFIX }}
          tag-only: true

  TestCommon:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go: [ '1.18', 'oldstable', 'stable' ]
    name: Run common tests with Go ${{ matrix.go }}
    steps:
      - name: Check out code
        uses: actions/checkout@v4
      - name: Set up Go env
        uses: actions/setup-go@v4
        with:
          go-version: ${{ matrix.go }}
      - name: Run tests
        run: |
          go version
          go test -v -timeout 9999s -count 1 -p 1 -cover -coverprofile coverage.txt ./
      - name: Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          flags: common
          name: common

  TestSQLite:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go: [ '1.18', 'oldstable', 'stable' ]
    name: Run SQLite tests with Go ${{ matrix.go }}
    steps:
      - name: Check out code
        uses: actions/checkout@v4
      - name: Set up Go env
        uses: actions/setup-go@v4
        with:
          go-version: ${{ matrix.go }}
      - name: Run tests (driver github.com/mattn/go-sqlite3)
        run: |
          export TIMEZONE="Asia/Ho_Chi_Minh"
          export SQLITE_URL="./temp/temp.db"
          export SQLITE_DRIVER="sqlite3"
          go version
          cd ./sql_test \
            && mkdir -p ./temp \
            && cp -f driver_test_sqlite1.test driver_test.go \
            && cp -f go.mod go.mod.backup && go mod tidy \
            && go test -v -timeout 9999s -count 1 -p 1 -cover -coverpkg=${COVER_PKG} -coverprofile=../coverage_sqlite_1.txt ./ \
            && cp -f go.mod.backup go.mod && cd ..
      - name: Run tests (driver modernc.org/sqlite)
        run: |
          export TIMEZONE="Asia/Ho_Chi_Minh"
          export SQLITE_URL="./temp/temp.db"
          export SQLITE_DRIVER="sqlite"
          go version
          cd ./sql_test \
            && mkdir -p ./temp \
            && cp -f driver_test_sqlite2.test driver_test.go \
            && cp -f go.mod go.mod.backup && go mod tidy \
            && go test -v -timeout 9999s -count 1 -p 1 -cover -coverpkg=${COVER_PKG} -coverprofile=../coverage_sqlite_2.txt ./ \
            && cp -f go.mod.backup go.mod && cd ..
      - name: Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          flags: sqlite
          name: sqlite

  TestPostgreSQL:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go: [ '1.19', 'oldstable', 'stable' ]
        pgsql: [ '11', '12', '13', '14', '15', '16' ]
    name: Run PostgreSQL ${{ matrix.pgsql }} tests with Go ${{ matrix.go }}
    steps:
      - name: Check out code
        uses: actions/checkout@v4
      - name: Set up Go env
        uses: actions/setup-go@v4
        with:
          go-version: ${{ matrix.go }}
      - name: Start PostgreSQL server
        run: docker run -d --name postgres -e POSTGRES_DB=test -e POSTGRES_USER=test -e POSTGRES_PASSWORD=test -p 5432:5432 postgres:${{ matrix.pgsql }}
      - name: Run tests (driver github.com/jackc/pgx/v5)
        run: |
          export TIMEZONE="Asia/Ho_Chi_Minh"
          export PGSQL_DRIVER="pgx"
          export PGSQL_URL="postgres://test:test@localhost:5432/test?sslmode=disable&client_encoding=UTF-8&application_name=prom"
          go version
          cd ./sql_test \
            && cp -f driver_test_pgsql1.test driver_test.go \
            && cp -f go.mod go.mod.backup && go mod tidy \
            && go test -v -timeout 9999s -count 1 -p 1 -cover -coverpkg=${COVER_PKG} -coverprofile ../coverage_pgsql_1.txt ./ \
            && cp -f go.mod.backup go.mod && cd ..
      - name: Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          flags: pgsql
          name: pgsql

  TestMSSQL:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go: [ '1.18', 'oldstable', 'stable' ]
        mssql: [ '2017-latest', '2019-latest', '2022-latest' ]
    name: Run MSSQL ${{ matrix.mssql }} tests with Go ${{ matrix.go }}
    steps:
      - name: Check out code
        uses: actions/checkout@v4
      - name: Set up Go env
        uses: actions/setup-go@v4
        with:
          go-version: ${{ matrix.go }}
      - name: Start MSSQL server
        run: docker run -d --name mssql-express -e ACCEPT_EULA=Y -e SA_PASSWORD=SecretPassword1 -e MSSQL_PID=Express -p 1433:1433 mcr.microsoft.com/mssql/server:${{ matrix.mssql }}
      - name: Run tests (driver github.com/microsoft/go-mssqldb)
        run: |
          export TIMEZONE="Asia/Ho_Chi_Minh"
          export MSSQL_DRIVER="sqlserver"
          export MSSQL_URL="sqlserver://sa:SecretPassword1@localhost:1433?database=tempdb"
          go version
          cd ./sql_test \
            && cp -f driver_test_mssql1.test driver_test.go \
            && cp -f go.mod go.mod.backup && go mod tidy \
            && go test -v -timeout 9999s -count 1 -p 1 -cover -coverpkg=${COVER_PKG} -coverprofile ../coverage_mssql_1.txt ./ \
            && cp -f go.mod.backup go.mod && cd ..
      - name: Run tests (driver github.com/denisenkom/go-mssqldb)
        run: |
          export TIMEZONE="Asia/Ho_Chi_Minh"
          export MSSQL_DRIVER="sqlserver"
          export MSSQL_URL="sqlserver://sa:SecretPassword1@localhost:1433?database=tempdb"
          go version
          cd ./sql_test \
            && cp -f driver_test_mssql2.test driver_test.go \
            && cp -f go.mod go.mod.backup && go mod tidy \
            && go test -v -timeout 9999s -count 1 -p 1 -cover -coverpkg=${COVER_PKG} -coverprofile ../coverage_mssql_2.txt ./ \
            && cp -f go.mod.backup go.mod && cd ..
      - name: Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          flags: mssql
          name: mssql

  TestMySql:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go: [ '1.18', 'oldstable', 'stable' ]
        mysql: [ '5.7', '8.0', '8.2' ]
    name: Run MySQL ${{ matrix.mysql }} tests with Go ${{ matrix.go }}
    steps:
      - name: Check out code
        uses: actions/checkout@v4
      - name: Set up Go env
        uses: actions/setup-go@v4
        with:
          go-version: ${{ matrix.go }}
      - name: Start MySQL server
        run: docker run -d --name mysql -e MYSQL_ROOT_PASSWORD=test -e MYSQL_DATABASE=test -e MYSQL_USER=test -e MYSQL_PASSWORD=test -p 3306:3306 mysql:${{ matrix.mysql }} --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci
      - name: Run tests with parseTime (driver github.com/go-sql-driver/mysql)
        run: |
          export TIMEZONE="Asia/Ho_Chi_Minh"
          export MYSQL_DRIVER="mysql"
          export MYSQL_URL="test:test@tcp(localhost:3306)/test?charset=utf8mb4,utf8&parseTime=true&loc=\${loc}"
          go version
          cd ./sql_test \
            && cp -f driver_test_mysql1.test driver_test.go \
            && cp -f go.mod go.mod.backup && go mod tidy \
            && go test -v -timeout 9999s -count 1 -p 1 -cover -coverpkg=${COVER_PKG} -coverprofile ../coverage_mysql_1_parsetime.txt ./ \
            && cp -f go.mod.backup go.mod && cd ..
      - name: Run tests without parseTime (driver github.com/go-sql-driver/mysql)
        run: |
          export TIMEZONE="Asia/Ho_Chi_Minh"
          export MYSQL_DRIVER="mysql"
          export MYSQL_URL="test:test@tcp(localhost:3306)/test?charset=utf8mb4,utf8&parseTime=false&loc=\${loc}"
          go version
          cd ./sql_test \
            && cp -f driver_test_mysql1.test driver_test.go \
            && cp -f go.mod go.mod.backup && go mod tidy \
            && go test -v -timeout 9999s -count 1 -p 1 -cover -coverpkg=${COVER_PKG} -coverprofile ../coverage_mysql_1.txt ./ \
            && cp -f go.mod.backup go.mod && cd ..
      - name: Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          flags: mysql
          name: mysql

  TestOracle:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go: [ 'stable' ]
        oracle: [ '18.4.0-xe', '21.3.0-xe' ]
    name: Run OracleDB ${{ matrix.oracle }} tests with Go ${{ matrix.go }}
    steps:
      - name: Check out code
        uses: actions/checkout@v4
      - name: Set up Go env
        uses: actions/setup-go@v4
        with:
          go-version: ${{ matrix.go }}
      - name: Pull OracleDB image
        run: |
          docker pull container-registry.oracle.com/database/express:${{ matrix.oracle }}
      - name: Start OracleDB server
        run: |
          docker run -d --name oracle-xe -p 1521:1521 -e ORACLE_PWD=SecretPassword1 -e ORACLE_CHARACTERSET=UTF8 container-registry.oracle.com/database/express:${{ matrix.oracle }}
          sleep 30
          if [ "${{ matrix.oracle }}" == "18.4.0-xe" ]; then
              sleep 480
          fi
      - name: Run tests (driver github.com/godror/godror)
        run: |
          export TIMEZONE="Asia/Ho_Chi_Minh"
          export ORACLE_DRIVER=godror
          export ORACLE_URL="user=system password=SecretPassword1 connectString=localhost:1521/XE libDir=./instantclient_21_12"
          go version
          cd ./sql_test_oracle \
            && unzip -o instantclient-basiclite-linux.x64-21.12.0.0.0dbru.zip -d . \
            && sudo dpkg -i libaio1_0.3.112-13build1_amd64.deb \
            && export LD_LIBRARY_PATH=$(pwd)/instantclient_21_12:$LD_LIBRARY_PATH \
            && cp -f go.mod go.mod.backup && go mod tidy \
            && go test -v -timeout 9999s -count 1 -p 1 -cover -coverpkg=${COVER_PKG} -coverprofile ../coverage_oracle2.txt ./ \
            && cp -f go.mod.backup go.mod && cd ..
      - name: Run tests (driver github.com/sijms/go-ora/v2)
        run: |
          export TIMEZONE="Asia/Ho_Chi_Minh"
          export ORACLE_DRIVER="oracle"
          export ORACLE_URL="oracle://system:SecretPassword1@localhost:1521/?SID=XE"
          export DATASET="simple"
          go version
          cd ./sql_test_oracle \
            && cp -f go.mod go.mod.backup && go mod tidy \
            && go test -v -timeout 9999s -count 1 -p 1 -cover -coverpkg=${COVER_PKG} -coverprofile ../coverage_oracle1.txt ./ \
            && cp -f go.mod.backup go.mod && cd ..
      - name: Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          flags: oracle
          name: oracle
